Add-Type -AssemblyName System.Web
Add-Type -AssemblyName System.IO.Compression.FileSystem
$listener = New-Object System.Net.HttpListener
$listener.Prefixes.Add("http://localhost:8080/")
$listener.Start()
Write-Host "üåê Web Explorer l√§uft auf http://localhost:8080"

function UrlEncode($str) { return [System.Web.HttpUtility]::UrlEncode($str) }
function UrlDecode($str) { return [System.Web.HttpUtility]::UrlDecode($str) }

function Get-DrivesJson {
    return [System.IO.DriveInfo]::GetDrives() | Where-Object { $_.IsReady } | ForEach-Object {
        $label = if ($_.VolumeLabel -ne "") { $_.VolumeLabel } else { $_.Name.TrimEnd('\') }
        [PSCustomObject]@{
            name  = $label
            emoji = "üíæ"
            path  = $_.RootDirectory.FullName
        }
    } | ConvertTo-Json -Depth 2
}

function Get-FilesJson($path) {
    $items = @()
    if (Test-Path $path) {
        Get-ChildItem -LiteralPath $path -Force | ForEach-Object {
            $isImage = $_.Extension -match "\.(jpg|jpeg|png|gif)$"
            $items += [PSCustomObject]@{
                Name = $_.Name
                Size = if ($_.PSIsContainer) { "Ordner" } else { "{0:N1} KB" -f ($_.Length / 1KB) }
                IsImage = $isImage
                Url = if ($isImage) { "/file?path=$(UrlEncode($_.FullName))" } else { $null }
            }
        }
    }
    return $items | ConvertTo-Json -Depth 2
}

$html = @'
<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Explorer UI</title>
<style>
  body, html { margin: 0; padding: 0; height: 100%; font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif; background: #18181b; color: white; overflow: hidden; }
  #container { display: flex; height: 100vh; width: 100vw; }
  #sidebar { background-color: #000000; box-shadow: 0 0 15px #000000aa; border-top-right-radius: 24px; border-bottom-right-radius: 24px; overflow: hidden; transition: width 0.3s ease; display: flex; flex-direction: column; justify-content: space-between; }
  #sidebar.closed { width: 24px; }
  #sidebar.open { width: 256px; }
  #hamburgerBtn { padding: 8px; color: white; background: none; border: none; cursor: pointer; font-size: 24px; }
  #explorerHeader { margin: 1rem 0 0 0.5rem; display: flex; justify-content: space-between; align-items: center; font-weight: bold; user-select: none; cursor: pointer; padding: 0 1rem; }
  #explorerHeader span.arrow { display: inline-block; transition: transform 0.3s ease; }
  #explorerHeader.collapsed span.arrow { transform: rotate(0deg); }
  #explorerHeader.expanded span.arrow { transform: rotate(90deg); }
  #explorerItems { overflow: hidden; padding-left: 0.5rem; margin: 0; list-style: none; transition: max-height 0.3s ease, opacity 0.3s ease; }
  #explorerItems.collapsed { max-height: 0; opacity: 0; }
  #explorerItems.expanded { max-height: 500px; opacity: 1; }
  #explorerItems div { display: flex; gap: 0.5rem; align-items: center; padding: 0.25rem 0.75rem; cursor: pointer; border-radius: 12px; user-select: none; }
  #explorerItems div:hover { background-color: #272727; }
  #explorerItems div.active { background-color: #3c3c3c; }
  #explorerItems .spacer { height: 1rem; }
  #main { flex-grow: 1; padding: 1.5rem; overflow-y: auto; }
  #main h1 { font-weight: 700; font-size: 1.5rem; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem; }
  #screens { display: grid; grid-template-columns: repeat(auto-fit,minmax(280px,1fr)); gap: 1rem; }
  .screenBox { background-color: #000000; border-radius: 24px; overflow: hidden; border: 1px solid #444; box-shadow: 0 0 15px #000000aa; }
  .screenBox header { background-color: #292929; font-weight: 600; padding: 0.75rem 1rem; border-top-left-radius: 24px; border-top-right-radius: 24px; }
  .screenBox img { width: 100%; display: block; border-bottom-left-radius: 24px; border-bottom-right-radius: 24px; }
  #folderInfo { margin-top: 2rem; background-color: #292929; border-radius: 24px; padding: 1rem 1.5rem; box-shadow: 0 0 10px #000000bb; display: flex; align-items: center; gap: 1rem; user-select: text; flex-direction: column; }
  #folderInfo .emoji { font-size: 3rem; }
  #folderInfo .details h2 { margin: 0 0 0.25rem 0; font-weight: 700; }
  #folderInfo .details p { margin: 0; color: #999999; }
  #fileList { margin-top:1rem; padding:0; list-style:none; }
  #fileList li { padding: 0.25rem 0; }
  #stopBtn { background-color: red; color: white; border: none; padding: 0.5rem 1rem; border-radius: 24px; cursor: pointer; margin: 1rem; display: none; }
</style>
</head>
<body>
<div id="container">
  <nav id="sidebar" class="closed">
    <div>
      <button id="hamburgerBtn" title="Sidebar umschalten">‚ò∞</button>
      <div id="explorerWrapper" style="display:none;">
        <div id="explorerHeader" class="expanded" title="Explorer umschalten">
          <span>üìÅ EXPLORER</span>
          <span class="arrow">‚ñ∂</span>
        </div>
        <div id="explorerItems" class="expanded"></div>
      </div>
    </div>
    <button id="stopBtn" onclick="fetch('/stop').then(()=>window.close())">Beenden</button>
  </nav>
  <main id="main">
    <h1>üñ•Ô∏è Live-View</h1>
    <div id="screens"></div>
    <section id="folderInfo" style="display:none;">
      <div class="emoji"></div>
      <div class="details">
        <h2></h2>
        <p>Inhalt von <strong></strong> wird hier angezeigt.</p>
        <ul id="fileList"></ul>
      </div>
    </section>
  </main>
</div>
<script>
(() => {
  const explorerItems = document.getElementById("explorerItems");
  const sidebar = document.getElementById("sidebar");
  const hamburgerBtn = document.getElementById("hamburgerBtn");
  const explorerWrapper = document.getElementById("explorerWrapper");
  const explorerHeader = document.getElementById("explorerHeader");
  const folderInfo = document.getElementById("folderInfo");
  const folderEmoji = folderInfo.querySelector(".emoji");
  const folderTitle = folderInfo.querySelector("h2");
  const folderStrong = folderInfo.querySelector("p strong");
  const fileList = document.getElementById("fileList");
  const stopBtn = document.getElementById("stopBtn");

  async function fetchVolumes() {
    const res = await fetch('/volumes');
    const volumes = await res.json();
    const explorerItemsData = [
      { name: "Desktop", emoji: "üñ•Ô∏è", path: "Desktop" },
      { name: "Downloads", emoji: "‚¨áÔ∏è", path: "Downloads" },
      { name: "Dokumente", emoji: "üìÑ", path: "Dokumente" },
      { name: "Bilder", emoji: "üñºÔ∏è", path: "Bilder" },
      { name: "Musik", emoji: "üéµ", path: "Musik" },
      { name: "Videos", emoji: "üé¨", path: "Videos" },
      { name: "", emoji: "", path: "" },
      { name: "Dieser PC", emoji: "üíª", path: "" },
      ...volumes
    ];
    explorerItems.innerHTML = "";
    explorerItemsData.forEach(({ name, emoji, path }) => {
      if (name === "") {
        const spacer = document.createElement("div");
        spacer.className = "spacer";
        spacer.style.height = "1rem";
        explorerItems.appendChild(spacer);
      } else {
        const item = document.createElement("div");
        item.textContent = `${emoji} ${name}`;
        item.addEventListener("click", () => loadFolder(path || name, emoji));
        explorerItems.appendChild(item);
      }
    });
  }

  function loadFolder(folderPath, emoji) {
    folderEmoji.textContent = emoji;
    folderTitle.textContent = folderPath;
    folderStrong.textContent = folderPath;
    fetch(`/files?path=${encodeURIComponent(folderPath)}`)
      .then(res => res.json())
      .then(files => {
        fileList.innerHTML = "";
        files.forEach(file => {
          const li = document.createElement("li");
          if (file.Size === "Ordner") {
            li.textContent = `üìÅ ${file.Name}`;
            li.style.cursor = "pointer";
            li.addEventListener("click", () => loadFolder(`${folderPath}\\${file.Name}`, "üìÅ"));
          } else if (file.IsImage) {
            const img = document.createElement("img");
            img.src = file.Url;
            img.style.maxWidth = "200px";
            img.style.display = "block";
            li.appendChild(img);
            const caption = document.createElement("span");
            caption.textContent = `${file.Name} (${file.Size})`;
            li.appendChild(caption);
          } else {
            li.textContent = `${file.Name} (${file.Size})`;
          }
          fileList.appendChild(li);
        });
        folderInfo.style.display = "flex";
      });
  }

  hamburgerBtn.addEventListener("click", () => {
    sidebar.classList.toggle("closed");
    sidebar.classList.toggle("open");
    explorerWrapper.style.display = sidebar.classList.contains("open") ? "block" : "none";
    stopBtn.style.display = sidebar.classList.contains("open") ? "inline-block" : "none";
  });

  explorerHeader.addEventListener("click", () => {
    explorerItems.classList.toggle("collapsed");
    explorerItems.classList.toggle("expanded");
    explorerHeader.classList.toggle("collapsed");
    explorerHeader.classList.toggle("expanded");
  });

  fetchVolumes();
})();
</script>
</body>
</html>
'@

while ($listener.IsListening) {
    $ctx = $listener.GetContext()
    $req = $ctx.Request
    $res = $ctx.Response

    try {
        if ($req.Url.AbsolutePath -eq "/") {
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($html)
            $res.ContentType = "text/html; charset=UTF-8"
            $res.OutputStream.Write($bytes, 0, $bytes.Length)
        }
        elseif ($req.Url.AbsolutePath -eq "/volumes") {
            $json = Get-DrivesJson
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($json)
            $res.ContentType = "application/json"
            $res.OutputStream.Write($bytes, 0, $bytes.Length)
        }
        elseif ($req.Url.AbsolutePath -eq "/files") {
            $path = UrlDecode($req.QueryString["path"])
            $aliases = @{
    "Desktop"   = [Environment]::GetFolderPath("Desktop")
    "Downloads" = Join-Path ([Environment]::GetFolderPath("UserProfile")) "Downloads"
    "Dokumente" = [Environment]::GetFolderPath("MyDocuments")
    "Bilder"    = [Environment]::GetFolderPath("MyPictures")
    "Musik"     = [Environment]::GetFolderPath("MyMusic")
    "Videos"    = [Environment]::GetFolderPath("MyVideos")
}

foreach ($key in $aliases.Keys) {
    if ($path -like "$key*") {
        $suffix = $path.Substring($key.Length)
        $path = Join-Path $aliases[$key] $suffix
        break
    }
}

            $json = Get-FilesJson $path
            $bytes = [System.Text.Encoding]::UTF8.GetBytes($json)
            $res.ContentType = "application/json"
            $res.OutputStream.Write($bytes, 0, $bytes.Length)
        }
        elseif ($req.Url.AbsolutePath -eq "/file") {
            $file = UrlDecode($req.QueryString["path"])
            if (Test-Path $file) {
                $bytes = [IO.File]::ReadAllBytes($file)
                $res.ContentType = "application/octet-stream"
                $res.OutputStream.Write($bytes, 0, $bytes.Length)
            }
        }
        elseif ($req.Url.AbsolutePath -eq "/stop") {
            $res.Close()
            $listener.Stop()
            break
        }
    } catch {
        $htmlErr = "<h1>Fehler</h1><pre>$($_.Exception.Message)</pre>"
        $bytes = [System.Text.Encoding]::UTF8.GetBytes($htmlErr)
        $res.ContentType = "text/html"
        $res.OutputStream.Write($bytes, 0, $bytes.Length)
    } finally {
        $res.OutputStream.Close()
    }
}
