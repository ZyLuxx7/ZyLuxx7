# ---------------------------
# 1. Admin-Check
# ---------------------------
function Test-IsAdmin {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (-not (Test-IsAdmin)) {
    Write-Host "‚ùå Dieses Skript muss als Administrator ausgef√ºhrt werden!"
    Pause
    exit
}
# ---------------------------
# You can delete the Admin-Check if you dont want it only delete from the admin-check to this part i don't recommend changing or deleting anything further only if you know what
#your doing
# ---------------------------
$liveshareCode = @'
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$listener = New-Object System.Net.HttpListener
$listener.Prefixes.Add("http://+:8080/")
$listener.Start()

while ($listener.IsListening) {
    try {
        $context = $listener.GetContext()
        $request = $context.Request
        $response = $context.Response
        $path = $request.Url.AbsolutePath

        if ($path -match "^/screen(\d+)\.jpg$") {
            $index = [int]$matches[1]
            $screens = [System.Windows.Forms.Screen]::AllScreens
            if ($index -ge 1 -and $index -le $screens.Count) {
                $screen = $screens[$index - 1]
                $bounds = $screen.Bounds

                $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
                $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
                $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)

                $ms = New-Object System.IO.MemoryStream
                $bitmap.Save($ms, [System.Drawing.Imaging.ImageFormat]::Jpeg)
                $bitmap.Dispose()
                $graphics.Dispose()

                $response.ContentType = "image/jpeg"
                $response.ContentLength64 = $ms.Length
                $ms.Position = 0
                $ms.CopyTo($response.OutputStream)
                $response.OutputStream.Close()
                $ms.Dispose()
            } else {
                $response.StatusCode = 404
                $response.Close()
            }
        } else {
            $screens = [System.Windows.Forms.Screen]::AllScreens
            $tiles = ""
            for ($i = 1; $i -le $screens.Count; $i++) {
                $tiles += @"
<div class='screen-tile'>
  <div class='top-bar'>
    <span>Bildschirm $i</span>
    <button onclick="openFullscreen('img$i')">üîç</button>
  </div>
  <img id="img$i" src='screen$i.jpg?rand=$(Get-Random)' />
</div>
"@
            }

            $html = @"
<html>
  <head>
    <title>Live View</title>
    <style>
      body { background: #000; color: white; font-family: sans-serif; margin: 0; padding: 0; }
      .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 15px; padding: 20px; }
      .screen-tile { background: #111; padding: 10px; border-radius: 10px; }
      .top-bar { display: flex; justify-content: space-between; margin-bottom: 5px; }
      button { background: #333; color: white; border: none; border-radius: 5px; cursor: pointer; }
      img { width: 100%; border-radius: 5px; border: 1px solid #444; }
    </style>
    <script>
      function refreshImages() {
        const imgs = document.querySelectorAll("img");
        imgs.forEach(img => {
          const src = img.src.split("?")[0];
          img.src = src + "?rand=" + Math.random();
        });
      }
      setInterval(refreshImages, 1000);
      function openFullscreen(id) {
        const el = document.getElementById(id);
        if (el.requestFullscreen) el.requestFullscreen();
        else if (el.webkitRequestFullscreen) el.webkitRequestFullscreen();
        else if (el.msRequestFullscreen) el.msRequestFullscreen();
      }
    </script>
  </head>
  <body>
    <div class="grid">$tiles</div>
  </body>
</html>
"@

            $buffer = [System.Text.Encoding]::UTF8.GetBytes($html)
            $response.ContentType = "text/html"
            $response.ContentLength64 = $buffer.Length
            $response.OutputStream.Write($buffer, 0, $buffer.Length)
            $response.OutputStream.Close()
        }
    } catch {
    
    }
}
'@

$tempScriptPath = "$env:TEMP\run-liveshare.ps1"
$liveshareCode | Out-File -Encoding UTF8 $tempScriptPath

Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$tempScriptPath`""
Start-Sleep -Seconds 2

$urlFile = "$env:TEMP\serveo_url.txt"
Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-NoProfile", "-Command", "ssh -R 80:localhost:8080 serveo.net | Tee-Object -FilePath `"$urlFile`""

Start-Sleep -Seconds 5

Start-Process notepad.exe $urlFile

exit
